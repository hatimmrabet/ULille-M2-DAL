variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

image: maven:3.8-openjdk-17-slim

stages:
  - clean
  - build
  - test
  - deploy

cache:
  paths:
    - .m2/repository

clean:
  image: maven:3.8-openjdk-17-slim
  stage: clean
  script:
    - echo "Cleaning leftovers from previous builds"
    - mvn $MAVEN_CLI_OPTS clean

java-compile:
  stage: build
  needs: ["clean"]
  script:
    - mvn $MAVEN_CLI_OPTS compile -DskipTests=true
  artifacts:
    expire_in: 15 min
    paths: 
      - target/  

unit-tests:
  image: maven:3.8-openjdk-17-slim
  services:
    - name: mongo:6.0.2
      alias: mongo
  stage: test
  needs: ["java-compile"]
  script:
    - find . -name "*.class" -exec touch {} \+
    - 'mvn $MAVEN_CLI_OPTS test'
  artifacts:
    when: always
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
        - target/failsafe-reports/TEST-*.xml

java-package:
  stage: deploy
  needs: ["unit-tests"]
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "production"
  script:
    - find . -name "*.class" -exec touch {} \+
    - mvn $MAVEN_CLI_OPTS package -DskipTests=true
  artifacts:
    name: "Jar for $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    paths:
      - "target/banque-0.0.1-SNAPSHOT.jar"

.docker-build:
  image: docker:20.10.16
  variables:
    DOCKER_HOST: tcp://docker:2375 
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

  stage: deploy
  needs: ["java-package"]
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE-$CI_ENVIRONMENT_NAME:latest" .
    - docker push "$CI_REGISTRY_IMAGE-$CI_ENVIRONMENT_NAME:latest"
  dependencies:
    - java-package

.deploy:
  image: alpine:latest
  stage: deploy
  before_script:
    - apk update
    - apk add --no-cache openssh-client
  script:
    - eval $(ssh-agent -s)
    - chmod 600 $PRIVATE_KEY
    - ssh-add $PRIVATE_KEY
    - mkdir -p ~/.ssh
    - ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - scp -i "$PRIVATE_KEY" -o StrictHostKeyChecking=no docker-compose.yml "${SERVER_USER}@$SERVER_IP:/home/$SERVER_USER/"
    - scp -i "$PRIVATE_KEY" -o StrictHostKeyChecking=no docker-compose.$CI_ENVIRONMENT_NAME.yml "${SERVER_USER}@$SERVER_IP:/home/$SERVER_USER/"

    - ssh -i "$PRIVATE_KEY" -o StrictHostKeyChecking=no "${SERVER_USER}@$SERVER_IP" "docker login -u '$CI_REGISTRY_USER' -p '$CI_REGISTRY_PASSWORD' $CI_REGISTRY"
    - ssh -i "$PRIVATE_KEY" -o StrictHostKeyChecking=no "${SERVER_USER}@$SERVER_IP" "cd /home/$SERVER_USER ; docker-compose down"
    - ssh -i "$PRIVATE_KEY" -o StrictHostKeyChecking=no "${SERVER_USER}@$SERVER_IP" "cd /home/$SERVER_USER ; docker rm -f $(docker ps -a -q)"
    - ssh -i "$PRIVATE_KEY" -o StrictHostKeyChecking=no "${SERVER_USER}@$SERVER_IP" "docker-compose -f /home/$SERVER_USER/docker-compose.$CI_ENVIRONMENT_NAME.yml up -d"

docker-build-to-staging:
  extends: .docker-build
  rules:
     - if: '$CI_COMMIT_BRANCH == "master"'
  environment: "staging"

docker-build-to-production:
  extends: .docker-build
  rules:
     - if: '$CI_COMMIT_BRANCH == "production"'
  environment: "production"

deploy-to-staging:
  extends: .deploy
  needs: ["docker-build-to-staging"]
  rules:
     - if: '$CI_COMMIT_BRANCH == "master"'
  environment: "staging"

deploy-to-production:
  extends: .deploy
  needs: ["docker-build-to-production"]
  rules:
     - if: '$CI_COMMIT_BRANCH == "production"'
       when: manual
  environment: "production"